diff -ur -x *.ppm jpeg-6b/jconfig.h _ralf_jpeg-6b/jconfig.h
--- jpeg-6b/jconfig.h	Sat Nov 17 14:32:36 2001
+++ _ralf_jpeg-6b/jconfig.h	Thu Aug 16 00:20:00 2001
@@ -20,7 +20,13 @@
 #ifdef JPEG_INTERNALS
 
 #undef RIGHT_SHIFT_IS_UNSIGNED
-#define INLINE __inline__
+
+#ifdef WIN32
+	#define INLINE	// RM 081501 for Win32
+#else
+	#define INLINE __inline__
+#endif
+
 /* These are for configuring the JPEG memory manager. */
 #undef DEFAULT_MAX_MEM
 #undef NO_MKTEMP
diff -ur -x *.ppm jpeg-6b/jmorecfg.h _ralf_jpeg-6b/jmorecfg.h
--- jpeg-6b/jmorecfg.h	Sat Aug  9 16:58:56 1997
+++ _ralf_jpeg-6b/jmorecfg.h	Sun Aug 12 18:44:37 2001
@@ -158,7 +158,11 @@
 /* INT32 must hold at least signed 32-bit values. */
 
 #ifndef XMD_H			/* X11/xmd.h correctly defines INT32 */
-typedef long INT32;
+
+#ifndef _BASETSD_H_		// RM 081101 type already declared by Windows in basestd.h
+	typedef long INT32;
+#endif
+
 #endif
 
 /* Datatype used for image dimensions.  The JPEG standard only supports
@@ -210,9 +214,11 @@
  */
 
 #ifdef NEED_FAR_POINTERS
-#define FAR  far
+	#undef FAR				// RM 081101 defined by Windows in windef.h
+	#define FAR  far
 #else
-#define FAR
+	#undef FAR
+	#define FAR
 #endif
 
 
diff -ur -x *.ppm jpeg-6b/rdjpgcom.c _ralf_jpeg-6b/rdjpgcom.c
--- jpeg-6b/rdjpgcom.c	Sat Oct 11 15:41:04 1997
+++ _ralf_jpeg-6b/rdjpgcom.c	Sat Nov 17 03:00:26 2001
@@ -121,6 +121,7 @@
 #define M_SOS   0xDA		/* Start Of Scan (begins compressed data) */
 #define M_APP0	0xE0		/* Application-specific marker, type N */
 #define M_APP12	0xEC		/* (we don't bother to list all 16 APPn's) */
+#define M_APP15 0xEF
 #define M_COM   0xFE		/* COMment */
 
 
@@ -231,24 +232,35 @@
     ERREXIT("Erroneous JPEG marker length");
   length -= 2;
 
-  while (length > 0) {
+  while (length > 0)
+  {
     ch = read_1_byte();
     /* Emit the character in a readable form.
      * Nonprintables are converted to \nnn form,
      * while \ is converted to \\.
      * Newlines in CR, CR/LF, or LF form will be printed as one newline.
      */
-    if (ch == '\r') {
+    if (ch == '\r')
+    {
       printf("\n");
-    } else if (ch == '\n') {
+    }
+    else if (ch == '\n')
+    {
       if (lastch != '\r')
 	printf("\n");
-    } else if (ch == '\\') {
+    }
+    else if (ch == '\\')
+    {
       printf("\\\\");
-    } else if (isprint(ch)) {
+    }
+    else if (isprint(ch))
+    {
       putc(ch, stdout);
-    } else {
-      printf("\\%03o", ch);
+    }
+    else
+    {
+      // printf("\\%03o", ch);
+      printf(".");
     }
     lastch = ch;
     length--;
@@ -271,6 +283,8 @@
   const char * process;
   int ci;
 
+  printf("processing marker SOF %d\n", marker-M_SOF0);
+  
   length = read_2_bytes();	/* usual parameter length count */
 
   data_precision = read_1_byte();
@@ -295,9 +309,9 @@
   default:	process = "Unknown";  break;
   }
 
-  printf("JPEG image is %uw * %uh, %d color components, %d bits per sample\n",
+  printf("**** JPEG image is %uw * %uh, %d color components, %d bits per sample\n",
 	 image_width, image_height, num_components, data_precision);
-  printf("JPEG process: %s\n", process);
+  printf("**** JPEG process: %s\n", process);
 
   if (length != (unsigned int) (8 + num_components * 3))
     ERREXIT("Bogus SOF marker length");
@@ -325,6 +339,7 @@
 {
   int marker;
 
+  
   /* Expect SOI at start of file */
   if (first_marker() != M_SOI)
     ERREXIT("Expected SOI marker first");
@@ -377,6 +392,14 @@
       break;
 
     default:			/* Anything else just gets skipped */
+ 
+      if (marker >= M_APP0 && marker <= M_APP15)
+      {
+	printf("marker: APP %d\n", marker - M_APP0);
+	process_COM();
+	break;
+      }
+      
       skip_variable();		/* we assume it has a parameter count... */
       break;
     }
